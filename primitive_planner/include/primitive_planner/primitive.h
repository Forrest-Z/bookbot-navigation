// Copyright 2019 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// 
//     https://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#ifndef BOOKBOT_PRIMITIVE_PLANNER_PRIMITIVE_H_
#define BOOKBOT_PRIMITIVE_PLANNER_PRIMITIVE_H_

#include <trajectory_math/path.h>

#include <Eigen/Core>
#include <Eigen/Geometry>
#include <memory>

constexpr double kTurnInPlaceCurvaturePenalty = 1;

namespace bookbot {

/**
 * @brief Possible primitive types. The Invalid type is used to signify a
 * default-constructed Primitive.
 */
enum class PathPrimitiveType {
  kTurnInPlace,
  kCubicSpiral,
  kStandStill,
  kInvalid
};

inline std::ostream& operator<<(std::ostream& stream,
                                const PathPrimitiveType& primitive_type) {
  switch (primitive_type) {
    case PathPrimitiveType::kTurnInPlace:
      stream << "<TurnInPlace>";
      break;
    case PathPrimitiveType::kCubicSpiral:
      stream << "<CubicSpiral>";
      break;
    case PathPrimitiveType::kStandStill:
      stream << "<StandStill>";
      break;
    case PathPrimitiveType::kInvalid:
      stream << "<Invalid>";
      break;
  }
  return stream;
}

struct PathPrimitive;

/**
 * @brief Base class for primitive evaluation objects.
 */
class PathPrimitiveEvaluationBase {
 public:
  virtual PathPoint InterpolateInteriorPoint(
      const PathPoint& start_point,
      double interpolation_distance_along_primitive) const = 0;

  virtual PathPrimitive GeneratePrimitive() const = 0;

  virtual std::string GetDescription() const = 0;
};

/**
 * @brief Summarizes precomputed behavior for a path primitive.
 */
struct PathPrimitive {
  PathPrimitive();

  // Non-owning pointer to evaluation object for non-time-critical interpolation
  // NOTE: This class does not mantain ownership of the evaluator object. The
  // user must ensure that the lifetime of the evaluator object exceeds the
  // lifetime of this object. It is recommended that PathPrimitive objects only
  // be generated from PathPrimitiveWithEvaluation objects.
  const PathPrimitiveEvaluationBase* evaluator_ptr;

  // Shape summary
  PathPrimitiveType primitive_type;
  double length;
  double x_rel;
  double y_rel;
  double delta_yaw;

  // Precomputed metrics
  double squared_curvature_integral;
};

/**
 * @brief Holder class that stores a primitive evaluator pointer. Objects of
 * this type can be moved arround without invalidating the raw evaluator pointer
 * in the primitive.
 * NOTE: It is the responsibility of the user to ensure that the lifetime of
 * this object exceeds the lifetime of the PathPrimitive object generated by the
 * GetPrimitive member function.
 */
class PathPrimitiveWithEvaluation {
 public:
  PathPrimitiveWithEvaluation(
      std::unique_ptr<PathPrimitiveEvaluationBase> primitive_evaluator);

  PathPrimitive GetPrimitive() const;

 private:
  std::unique_ptr<PathPrimitiveEvaluationBase> primitive_evaluator_;
};

PathPrimitiveWithEvaluation GenerateStandStillPrimitive();

PathPrimitiveWithEvaluation GenerateTurnInPlacePrimitive(double delta_yaw);

PathPrimitiveWithEvaluation GenerateCubicSpiralPrimitive(double length,
                                                         double delta_yaw);

}  // namespace bookbot

#endif  // BOOKBOT_PRIMITIVE_PLANNER_PRIMITIVE_H_
